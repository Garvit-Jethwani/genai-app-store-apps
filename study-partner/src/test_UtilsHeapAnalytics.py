# ********RoostGPT********
"""
Test generated by RoostGPT for test genai-pytest-pipenv using AI Type Open AI and AI Model gpt-4-turbo

ROOST_METHOD_HASH=heap_analytics_f6f23cbe00
ROOST_METHOD_SIG_HASH=heap_analytics_907a9fd75d

### Scenario 1: Testing without HEAP_ID set in environment variables
Details:
  TestName: test_heap_analytics_without_heap_id
  Description: This test verifies that the function returns `None` if the `HEAP_ID` environment variable is not set.
Execution:
  Arrange: Ensure the `HEAP_ID` environment variable is not set in the test environment.
  Act: Invoke the `heap_analytics` function with appropriate parameters.
  Assert: Check if the function returns `None`.
Validation:
  The importance of this test is to ensure that the function properly handles missing environment configurations which are crucial for its operation. According retailer to the current implementation, the absence of the HEAP_ID should render the function non-operational, hence, returning `None`.

### Scenario 2: Testing with HEAP_ID set and no user ID
Details:
  TestName: test_heap_analytics_with_heap_id_no_userid
  Description: This test checks if the function initializes Heap analytics script correctly when `userid` is `None`.
Execution:
  Arrange: Set the `HEAP_ID` environment variable. Ensure `userid` is `None`.
  Act: Call `heap_analytics` with `None` for `userid`.
  Assert: Verify that the returned script includes the initialization for Heap but does not include user identification or event properties.
Validation:
  Validates the basic initialization logic of the analytics tool without any user-specific data, ensuring privacy and correct script setup when user data is not supplied.

### Scenario 3: Testing with HEAP_ID set and valid user ID
Details:
  TestNames: test_heap_analytics_with_heap_id_and_userid
  Description: This test verifies that the Heap analytics scripts properly hash the userid and includes it for user identification.
Execution:
  Arrange: Set the `HEAP_ID` environment variable and provide a valid `userid`.
  Act: Invoke the `heap_analytics` function with the `userid`.
  Assert: Confirm that the returned script includes properly hashed userid in the `heap.identify()` call.
Validation:
  Ensures that the function securely hashes user identity and integrates it into the analytics setup, which is critical for user tracking in a secure manner.

### Scenario 4: Testing with event properties included
Details:
  TestName: test_heap_analytics_with_event_properties
  Description: Ensures that the function incorporates provided event properties into the analytics script.
Execution:
  Arrange: Set `HEAP_ID`, provide a valid `userid`, and include a dictionary of event properties.
  Act: Call `heap_analytics` with these parameters.
  Assert: Check that the returned script includes the correct syntax for adding event properties.
Validation:
  This test is important to confirm that custom event properties are correctly handled and added to the script, allowing for detailed analytics tracking.

### Scenario 5: Testing with HEAP_ID and a combination of user ID and event properties
Details:
  TestName: test_heap_analytics_with_all_parameters
  Description: Examines the functionâ€™s response when all parameters are provided, and they integrate correctly in the resulting script.
Execution:
  Arrange: Set the environment variable `HEAP-ID`, provide both a `userid` and a dictionary of event properties.
  Act: Invoke `heap_analytics` with these inputs.
  Assert: Verify that the resulting script contains the hashed `userid` and the event properties in the appropriate script functions.
Validation:
  This scenario ensures the function's full capability to operate with a full set of inputs, verifying integration of user tracking and event properties together, essential for robust user activity analysis.
"""

# ********RoostGPT********
import os
import hashlib
import pytest
from h2o_wave import ui

# Assuming this function exists and works as specified in the provided function documentation
def heap_analytics(userid, event_properties=None) -> ui.inline_script:
    if "HEAP_ID" not in os.environ:
        return None
    heap_id = os.getenv("HEAP_ID")
    script_contents = f"""
window.heap=window.heap||[],heap.load=function(e,t){{window.heap.appid=e,window.heap.config=t=t||{{}};var r=document.createElement('script');r.type='text/javascript',r.async=!0,r.src='https://cdn.heapanalytics.com/js/heap-'+e+'.js';var a=document.getElementsByTagName('script')[0];a.parentNode.insertBefore(r,a);for(var n=function(e){{return function(){{heap.push([e].concat(Array.prototype.slice.call(arguments,0)))}}}},p=['addEventProperties','addUserProperties','clearEventProperties','identify','resetIdentity','removeEventProperty','setEventPedgtestroperties','track','unsetEventProperty'],o=0;o<p.length;o++)heap[p[o]]=n(p[o])}};
heap.load('{heap_id}');
    """

    if userid is not None:
        identity = hashlib.sha256(userid.encode()).hexdigest()
        script_contents += f"heap.identify('{identity}');"

    if event_properties is not None:
        script_contents += f"heap.addEventProperties({event_properties})"

    return ui.inline_script(content=script_contents)

class Test_UtilsHeapAnalytics:
    @pytest.fixture(autouse=True)
    def setup_and_teardown(self):
        # Setup
        self.original_heap_id = os.environ.get("HEAP_ID")

        # This will run after each test
        yield

        # Teardown
        if self.original_heap is None:
            os.environ.pop("HEAP_ID", None)
        else:
            os.environ["HEAP_ID"] = self.original_heap_id

    def test_heap_analytics_without_heap_id(self):
        # Arrange
        os.environ.pop("HEAP_ID", None)

        # Act
        result = heap_analytics(userid="someuserid")

        # Assert
        assert result is None, "Function should return None when HEAP_ID is not set"

    def test_heap_analytics_with_heap_id_no_userid(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"

        # Act
        result = heap_analytics(userid=None)

        # Assert
        expected_script = """
window.heap=window.heap||[],heap.load=function(e,t){window.heap.appid=e,window.heap.config=t=t||{};var r=document.createElement('script');r.type='text/javascript',r.async=!0,r.src='https://cdn.heapanalytics.com/js/heap-'+e+'.js';var a=document.getElementsByTagName('script')[0];a.parentNode.insertBefore(r,a);for(var n=function(e){return function(){heap.push([e].concat(Array.prototype.slice.call(arguments,0)))}},p=['addEventProperties','addUserProperties','clearEventProperties','identify','resetIdentity','removeEventProperty','setEventProperties','track','unsetEventProperty'],o=0;o<p.length;o++)heap[p[o]]=n(p[o])};heap.load('test_heap_id');
        """.strip()
        assert result.content.strip() == expected_script, "Script initialization does not match expected without userid"

    def test_heap_analytics_with_heap_id_and_userid(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"
        userid = "user123"

        # Act
        result = heap_analytics(userid=userid)

        # Assert
        identity = hashlib.sha256(userid.encode()).hexdigest()
        assert f"heap.identify('{identity}');" in result.content, "User ID should be hashed and included in the script"

    def test_heap_analytics_with_event_properties(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"
        userid = "user123"
        event_properties = {"a": "hello", "b": "world"}

        # Act
        result = heap_analytics(userid=userid, event_properties=event_properties)

        # Assert
        assert f"heap.addEventProperties({event_properties})" in result.content, "Event properties should be included in the script"

